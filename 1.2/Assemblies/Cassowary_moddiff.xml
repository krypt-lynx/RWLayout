<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cassowary_moddiff</name>
    </assembly>
    <members>
        <member name="T:Cassowary_moddiff.Cl">
            <summary>
            The enumerations from ClLinearInequality,
            and `global' functions that we want easy to access
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.ClAbstractVariable">
            <summary>
            A base class for all variable types
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.#ctor(System.String)">
            <summary>
            creates variable with custom name
            </summary>
            <param name="name">nariable name</param>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.#ctor">
            <summary>
            creates variable with autogenerated name
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.#ctor(System.Int64,System.String)">
            <summary>
            creates variable with autogenerated name
            </summary>
            <param name="varnumber">
            variable id
            </param>
            <param name="prefix">
            variable name prefix
            </param>
        </member>
        <member name="P:Cassowary_moddiff.ClAbstractVariable.Name">
            <summary>
            variable name
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClAbstractVariable.IsDummy">
            <summary>
            a placeholder variable
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClAbstractVariable.IsExternal">
            <summary>
            indicates variable was added from outside of solver and should be preserved
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClAbstractVariable.IsPivotable">
            <summary>
            variable can be pivoted (TODO: proper description)
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClAbstractVariable.IsRestricted">
            <summary>
            variable can not be negative
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Addition(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing summ of to variables
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Addition(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            creates linear expression representing summ of to variable and constant number
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Addition(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing summ of to variable and constant number
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Addition(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            creates linear expression representing summ of to variable and constant number
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Addition(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing summ of to variable and constant number
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Subtraction(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing sunstracion 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Subtraction(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            creates linear expression representing sunstracion 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Subtraction(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing sunstracion 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Subtraction(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            creates linear expression representing sunstracion 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Subtraction(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing sunstracion 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Multiply(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            creates linear expression representing multiplication of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Multiply(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing multiplication of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Multiply(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            creates linear expression representing multiplication of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Multiply(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            creates linear expression representing multiplication of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Division(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            creates linear expression representing division of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_Division(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            creates linear expression representing division of variable by number 
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns>linear expression</returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThan(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThan(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThanOrEqual(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThanOrEqual(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThan(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThan(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThan(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThan(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThanOrEqual(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThanOrEqual(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThanOrEqual(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThanOrEqual(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThan(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThan(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThan(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThan(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThanOrEqual(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThanOrEqual(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_GreaterThanOrEqual(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_LessThanOrEqual(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_ExclusiveOr(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_ExclusiveOr(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_ExclusiveOr(Cassowary_moddiff.ClAbstractVariable,System.Int32)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_ExclusiveOr(System.Double,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClAbstractVariable.op_ExclusiveOr(System.Int32,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="T:Cassowary_moddiff.ClConstraint">
            <summary>
            linear constraint base class
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClConstraint.#ctor(Cassowary_moddiff.ClStrength,System.Double)">
            <summary>
            Creates constraint with strength
            </summary>
            <param name="strength">constraint strength</param>
            <param name="weight">constraint weight</param>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.Expression">
            <summary>
            expression of the constraint
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.IsEditConstraint">
            <summary>
            constraint used for variable edit 
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.IsInequality">
            <summary>
            constraint is inequality
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.IsStayConstraint">
            <summary>
             constraint represents value stay
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.Strength">
            <summary>
            Strength of the constraint
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClConstraint.SetStrength(Cassowary_moddiff.ClStrength)">
            <summary>
            temporary method to set streight after constraint creation (ised in AddConstraint extansions). TODO: remove
            </summary>
            <param name="strength"></param>
        </member>
        <member name="P:Cassowary_moddiff.ClConstraint.Weight">
            <summary>
            Constraint weight
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClConstraint.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.ClEditInfo">
            <summary>
            ClEditInfo is privately-used class
            that just wraps a constraint, its positive and negative
            error variables, and its prior edit constant.
            It is used as values in ClvEditPlus, and replaces
            the parallel vectors of error variables and previous edit
            constants from the Smalltalk version of the code.
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.ClLinearEquation">
            <summary>
            represents linear equation constraint
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.#ctor(Cassowary_moddiff.ClDouble,System.Collections.Generic.Dictionary{Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClDouble})">
            <summary>
            For use by the clone method.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.AddExpression(Cassowary_moddiff.ClLinearExpression,System.Double,Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClTableau)">
            <summary>
            Add n*expr to this expression from another expression expr.
            Notify the solver if a variable is added or deleted from this
            expression.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.AddExpression(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Add n*expr to this expression from another expression expr.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.AddVariable(Cassowary_moddiff.ClAbstractVariable,System.Double)">
            <summary>
            Add a term c*v to this expression.  If the expression already
            contains a term involving v, add c to the existing coefficient.
            If the new coefficient is approximately 0, delete v.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.AddVariable(Cassowary_moddiff.ClAbstractVariable,System.Double,Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClTableau)">
            <summary>
            Add a term c*v to this expression.  If the expression already
            contains a term involving v, add c to the existing coefficient.
            If the new coefficient is approximately 0, delete v.  Notify the
            solver if v appears or disappears from this expression.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.AnyPivotableVariable">
            <summary>
            Return a pivotable variable in this expression.  (It is an error
            if this expression is constant -- signal ExCLInternalError in
            that case).  Return null if no pivotable variables
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.SubstituteOut(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClTableau)">
            <summary>
            Replace var with a symbolic expression expr that is equal to it.
            If a variable has been added to this expression that wasn't there
            before, or if a variable has been dropped from this expression
            because it now has a coefficient of 0, inform the solver.
            PRECONDITIONS:
              var occurs with a non-zero coefficient in this expression.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.ChangeSubject(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
             <summary>
             This linear expression currently represents the equation
             oldSubject=self.  Destructively modify it so that it represents
             the equation newSubject=self.
            
             Precondition: newSubject currently has a nonzero coefficient in
             this expression.
            
             NOTES
               Suppose this expression is c + a*newSubject + a1*v1 + ... + an*vn.
            
               Then the current equation is 
                   oldSubject = c + a*newSubject + a1*v1 + ... + an*vn.
               The new equation will be
                    newSubject = -c/a + oldSubject/a - (a1/a)*v1 - ... - (an/a)*vn.
               Note that the term involving newSubject has been dropped.
             </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.NewSubject(Cassowary_moddiff.ClAbstractVariable)">
             <summary>
             This linear expression currently represents the equation self=0.  Destructively modify it so 
             that subject=self represents an equivalent equation.  
            
             Precondition: subject must be one of the variables in this expression.
             NOTES
               Suppose this expression is
                 c + a*subject + a1*v1 + ... + an*vn
               representing 
                 c + a*subject + a1*v1 + ... + an*vn = 0
             The modified expression will be
                subject = -c/a - (a1/a)*v1 - ... - (an/a)*vn
               representing
                subject = -c/a - (a1/a)*v1 - ... - (an/a)*vn
            
             Note that the term involving subject has been dropped.
             Returns the reciprocal, so changeSubject can use it, too
             </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.CoefficientFor(Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Return the coefficient corresponding to variable var, i.e.,
            the 'ci' corresponding to the 'vi' that var is:
                 v1*c1 + v2*c2 + .. + vn*cn + c
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Implicit(Cassowary_moddiff.ClAbstractVariable)~Cassowary_moddiff.ClLinearExpression">
            <summary>
            implicit variable to expression conversion
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Implicit(System.Int32)~Cassowary_moddiff.ClLinearExpression">
            <summary>
            implicit number to expression conversion
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Implicit(System.Double)~Cassowary_moddiff.ClLinearExpression">
            <summary>
            implicit number to expression conversion
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_UnaryPlus(Cassowary_moddiff.ClLinearExpression)">
            <summary>
            returns copy of expression without changing it
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_UnaryNegation(Cassowary_moddiff.ClLinearExpression)">
            <summary>
            returns negated copy of expression
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Addition(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            creates linear expression representing summ of two expressions
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Subtraction(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            creates linear expression representing substraction of two expressions
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Multiply(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            creates linear expression representing multiplication of two expressions
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_Division(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            creates linear expression representing division of two expressions
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(System.Double,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(System.Double,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(System.Double,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(System.Double,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(Cassowary_moddiff.ClLinearExpression,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(System.Int32,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThan(Cassowary_moddiff.ClLinearExpression,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThan(System.Int32,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(Cassowary_moddiff.ClLinearExpression,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(System.Int32,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_GreaterThanOrEqual(Cassowary_moddiff.ClLinearExpression,System.Int32)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_LessThanOrEqual(System.Int32,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear inequality constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(Cassowary_moddiff.ClLinearExpression,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(Cassowary_moddiff.ClLinearExpression,System.Double)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(Cassowary_moddiff.ClLinearExpression,System.Int32)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(System.Double,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClLinearExpression.op_ExclusiveOr(System.Int32,Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Creates linear equation constraint with default strenght
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="T:Cassowary_moddiff.ClLinearInequality">
            <summary>
            Represents linear inequality constraint
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.CassowarySimplexSolverPointExtensions.AddPointStays(Cassowary_moddiff.ClSimplexSolver,System.Collections.Generic.IEnumerable{Cassowary_moddiff.ClPoint})">
            <summary>
            Add weak stays to the x and y parts of each point. These
            have increasing weights so that the solver will try to satisfy
            the x and y stays on the same point, rather than the x stay on
            one and the y stay on another.
            <param name="points">
            List of points to add weak stay constraints for.
            </param>
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.ClSimplexSolver">
            <summary>Simplex solver. Resolves set of constraints using system of linear equations</summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.#ctor">
            <summary>
            Constructor initializes the fields, and creaties the objective row.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddConstraint(Cassowary_moddiff.ClConstraint)">
            <summary>
            Add a constraint to the solver.
            <param name="cn">
            The constraint to be added.
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.TryAddConstraint(Cassowary_moddiff.ClConstraint)">
            <summary>
            Same as AddConstraint, throws no exceptions.
            <returns>
            False if the constraint resulted in an unsolvable system, otherwise true.
            </returns>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddEditVar(Cassowary_moddiff.ClVariable,Cassowary_moddiff.ClStrength)">
            <summary>
            Add an edit constraint for a variable with a given strength.
            <param name="v">Variable to add an edit constraint to.</param>
            <param name="strength">Strength of the edit constraint.</param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.RemoveEditVar(Cassowary_moddiff.ClVariable)">
            <summary>
            Remove the edit constraint previously added.
            <param name="v">Variable to which the edit constraint was added before.</param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.BeginEdit(Cassowary_moddiff.ClVariable[])">
            <summary>
            Marks the start of an edit session.
            </summary>
            <remarks>
            BeginEdit should be called before sending Resolve()
            messages, after adding the appropriate edit variables.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.Cassowary_moddiff#IEditContext#EndEdit">
            <summary>
            Marks the end of an edit session.
            </summary>
            <remarks>
            EndEdit should be called after editing has finished for now, it
            just removes all edit variables.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.RemoveEditVarsTo(System.Int32)">
            <summary>
            Remove the last added edit vars to leave only
            a specific number left.
            <param name="n">
            Number of edit variables to keep.
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.Cassowary_moddiff#IEditContext#Resolve">
            <summary>
            Re-solve the current collection of constraints, given the new
            values for the edit variables that have already been
            suggested (see <see cref="M:Cassowary_moddiff.IEditContext.SuggestValue(Cassowary_moddiff.ClVariable,System.Double)"/> method).
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.Cassowary_moddiff#IEditContext#SuggestValue(Cassowary_moddiff.ClVariable,System.Double)">
            <summary>
            Suggest a new value for an edit variable. 
            </summary>
            <remarks>
            The variable needs to be added as an edit variable and 
            BeginEdit() needs to be called before this is called.
            The tableau will not be solved completely until after Resolve()
            has been called.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddStay(Cassowary_moddiff.ClVariable,Cassowary_moddiff.ClStrength,System.Double)">
            <summary>
            Add a stay of the given strength (default to ClStrength#Weak)
            of a variable to the tableau..
            <param name="v">
            Variable to add the stay constraint to.
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddStay(Cassowary_moddiff.ClVariable,Cassowary_moddiff.ClStrength)">
            <remarks>
            Default to weight 1.0.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddStay(Cassowary_moddiff.ClVariable)">
            <remarks>
            Default to strength ClStrength#Weak.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.RemoveConstraint(Cassowary_moddiff.ClConstraint)">
            <summary>
            Remove a constraint from the tableau.
            Also remove any error variable associated with it.
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClSimplexSolver.AutoSolve">
            <summary>
            Controls wether optimization and setting of external variables is done
            automatically or not.
            </summary>
            <remarks>
            By default it is done automatically and <see cref="M:Cassowary_moddiff.ClSimplexSolver.Solve"/> never needs
            to be explicitly called by client code. If <see cref="P:Cassowary_moddiff.ClSimplexSolver.AutoSolve"/> is
            put to false, then <see cref="M:Cassowary_moddiff.ClSimplexSolver.Solve"/> needs to be invoked explicitly
            before using variables' values. 
            (Turning off <see cref="P:Cassowary_moddiff.ClSimplexSolver.AutoSolve"/> while addings lots and lots
            of constraints [ala the AddDel test in ClTests] saved about 20 % in
            runtime, from 60sec to 54sec for 900 constraints, with 126 failed adds).
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AllVariables">
            <summary>
            All known external variables
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.RemoveVariable(Cassowary_moddiff.ClVariable)">
            <summary>
            Removes all constraints using variable 
            </summary>
            <param name="v">variable</param>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.AddWithArtificialVariable(Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Add the constraint expr=0 to the inequality tableau using an
            artificial variable.
            </summary>
            <remarks>
            To do this, create an artificial variable av and add av=expr
            to the inequality tableau, then make av be 0 (raise an exception
            if we can't attain av=0).
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.TryAddingDirectly(Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Try to add expr directly to the tableau without creating an
            artificial variable.
            </summary>
            <remarks>
            We are trying to add the constraint expr=0 to the appropriate
            tableau.
            </remarks>
            <returns>
            True if successful and false if not.
            </returns>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.ChooseSubject(Cassowary_moddiff.ClLinearExpression)">
            <summary>
            Try to choose a subject (a variable to become basic) from
            among the current variables in expr.
            </summary>
            <remarks>
            We are trying to add the constraint expr=0 to the tableaux.
            If expr constains any unrestricted variables, then we must choose
            an unrestricted variable as the subject. Also if the subject is
            new to the solver, we won't have to do any substitutions, so we
            prefer new variables to ones that are currently noted as parametric.
            If expr contains only restricted variables, if there is a restricted
            variable with a negative coefficient that is new to the solver we can
            make that the subject. Otherwise we can't find a subject, so return nil.
            (In this last case we have to add an artificial variable and use that
            variable as the subject -- this is done outside this method though.)
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.Optimize(Cassowary_moddiff.ClObjectiveVariable)">
            <summary>
            Minimize the value of the objective.
            </summary>
            <remarks>
            The tableau should already be feasible.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.DeltaEditConstant(System.Double,Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Fix the constants in the equations representing the edit constraints.
            </summary>
            <remarks>
            Each of the non-required edits will be represented by an equation
            of the form:
              v = c + eplus - eminus
            where v is the variable with the edit, c is the previous edit value,
            and eplus and eminus are slack variables that hold the error in 
            satisfying the edit constraint. We are about to change something,
            and we want to fix the constants in the equations representing
            the edit constraints. If one of eplus and eminus is basic, the other
            must occur only in the expression for that basic error variable. 
            (They can't both be basic.) Fix the constant in this expression.
            Otherwise they are both non-basic. Find all of the expressions
            in which they occur, and fix the constants in those. See the
            UIST paper for details.
            (This comment was for ResetEditConstants(), but that is now
            gone since it was part of the screwey vector-based interface
            to resolveing. --02/16/99 gjb)
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.DualOptimize">
            <summary>
            Re-optimize using the dual simplex algorithm.
            </summary>
            <remarks>
            We have set new values for the constants in the edit constraints.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.Pivot(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Do a pivot. Move entryVar into the basis and move exitVar 
            out of the basis.
            </summary>
            <remarks>
            We could for example make entryVar a basic variable and
            make exitVar a parametric variable.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.ResetStayConstants">
            <summary>
            Fix the constants in the equations representing the stays.
            </summary>
            <remarks>
            Each of the non-required stays will be represented by an equation
            of the form
              v = c + eplus - eminus
            where v is the variable with the stay, c is the previous value
            of v, and eplus and eminus are slack variables that hold the error
            in satisfying the stay constraint. We are about to change something,
            and we want to fix the constants in the equations representing the
            stays. If both eplus and eminus are nonbasic they have value 0
            in the current solution, meaning the previous stay was exactly
            satisfied. In this case nothing needs to be changed. Otherwise one
            of them is basic, and the other must occur only in the expression
            for that basic error variable. Reset the constant of this
            expression to 0.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.SetExternalVariables">
            <summary>
            Set the external variables known to this solver to their appropriate values.
            </summary>
            <remarks>
            Set each external basic variable to its value, and set each external parametric
            variable to 0. (It isn't clear that we will ever have external parametric
            variables -- every external variable should either have a stay on it, or have an
            equation that defines it in terms of other external variables that do have stays.
            For the moment I'll put this in though.) Variables that are internal to the solver
            don't actually store values -- their values are just implicit in the tableau -- so
            we don't need to set them.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.ClSimplexSolver.InsertErrorVar(Cassowary_moddiff.ClConstraint,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Protected convenience function to insert an error variable
            into the _errorVars set, creating the mapping with Add as necessary.
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClSimplexSolver._stayMinusErrorVars">
            <summary>
            The array of negative error vars for the stay constraints
            (need both positive and negative since they have only non-negative
            values).
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClSimplexSolver._stayPlusErrorVars">
            <summary>
            The array of positive error vars for the stay constraints
            (need both positive and negative since they have only non-negative
            values).
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClSimplexSolver._errorVars">
            <summary>
            Give error variables for a non-required constraints,
            maps to ClSlackVariable-s.
            </summary>
            <remarks>
            Map ClConstraint to Set (of ClVariable).
            </remarks>
        </member>
        <member name="F:Cassowary_moddiff.ClSimplexSolver._editVarMap">
            <summary>
            Map edit variables to ClEditInfo-s.
            </summary>
            <remarks>
            ClEditInfo instances contain all the information for an
            edit constraints (the edit plus/minus vars, the index [for old-style
            resolve(ArrayList...)] interface), and the previous value.
            (ClEditInfo replaces the parallel vectors from the Smalltalk impl.)
            </remarks>
        </member>
        <member name="T:Cassowary_moddiff.ConstraintsBuilder">
            <summary>
            Constraints builder extension
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ConstraintsBuilder.AddConstraints(Cassowary_moddiff.ClSimplexSolver,Cassowary_moddiff.ClStrength,System.Collections.Generic.IEnumerable{Cassowary_moddiff.ClConstraint})">
            <summary>
            Add multiple constraints to the solver.
            <param name="solver">
            the solver
            </param>
            <param name="constraints">
            The constraint to be added.
            </param>
            <param name="strength">
            strength for the constraints
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ConstraintsBuilder.AddConstraints(Cassowary_moddiff.ClSimplexSolver,Cassowary_moddiff.ClStrength,Cassowary_moddiff.ClConstraint[])">
            <summary>
            Add multiple constraints to the solver.
            <param name="solver">
            the solver
            </param>
            <param name="constraints">
            The constraint to be added.
            </param>
            <param name="strength">
            strength for the constraints
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ConstraintsBuilder.AddConstraints(Cassowary_moddiff.ClSimplexSolver,System.Collections.Generic.IEnumerable{Cassowary_moddiff.ClConstraint})">
            <summary>
            Add multiple constraints to the solver.
            <param name="solver">
            the solver
            </param>
            <param name="constraints">
            The constraint to be added.
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ConstraintsBuilder.AddConstraints(Cassowary_moddiff.ClSimplexSolver,Cassowary_moddiff.ClConstraint[])">
            <summary>
            Add multiple constraints to the solver.
            <param name="solver">
            the solver
            </param>
            <param name="constraints">
            The constraint to be added.
            </param>
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ConstraintsBuilder.AddConstraint(Cassowary_moddiff.ClSimplexSolver,Cassowary_moddiff.ClStrength,Cassowary_moddiff.ClConstraint)">
            <summary>
            Add a constraint to the solver.
            <param name="solver">
            the solver
            </param>
            <param name="constraint">
            The constraint to be added.
            </param>
            <param name="strength">
            strength for the constraint
            </param>
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClStrength.Required">
            <summary>
            Highest possible constraint priority
            </summary>
            <remarks>
            Solver will throw exception if cannot be satisfied
            </remarks>
        </member>
        <member name="P:Cassowary_moddiff.ClStrength.Strong">
            <summary>
            Strong constraint priority
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClStrength.Medium">
            <summary>
            Medium constraint priority
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClStrength.Weak">
            <summary>
            Weak
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.#ctor">
            <summary>
            Constructor is protected, since this only supports an ADT for
            the ClSimplexSolver class.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.NoteRemovedVariable(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Variable v has been removed from an expression. If the
            expression is in a tableau the corresponding basic variable is
            subject (or if subject is nil then it's in the objective function).
            Update the column cross-indices.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.NoteAddedVariable(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            v has been added to the linear expression for subject
            update column cross indices.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.InsertColVar(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Convenience function to insert a variable into
            the set of rows stored at _columns[param_var],
            creating a new set if needed. 
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.RemoveColumn(Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Remove v from the tableau -- remove the column cross indices for v
            and remove v from every expression in rows in which v occurs
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.RemoveRow(Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Remove the basic variable v from the tableau row v=expr
            Then update column cross indices.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.SubstituteOut(Cassowary_moddiff.ClAbstractVariable,Cassowary_moddiff.ClLinearExpression)">
            <summary> 
            Replace all occurrences of oldVar with expr, and update column cross indices
            oldVar should now be a basic variable.
            </summary> 
        </member>
        <member name="P:Cassowary_moddiff.ClTableau.Columns">
            <summary>
            _columns is a mapping from variables which occur in expressions to the
            set of basic variables whose expressions contain them
            i.e., it's a mapping from variables in expressions (a column) to the 
            set of rows that contain them.
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClTableau.Rows">
            <summary>
            _rows maps basic variables to the expressions for that row in the tableau.
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClTableau.ColumnsHasKey(Cassowary_moddiff.ClAbstractVariable)">
            <summary>
            Return true if and only if the variable subject is in the columns keys 
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClTableau.InfeasibleRows">
            <summary>
            Collection of basic variables that have infeasible rows
            (used when reoptimizing).
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClTableau.ExternalRows">
            <summary>
            Set of rows where the basic variable is external
            this was added to the Java/C++/C# versions to reduce time in SetExternalVariables().
            </summary>
        </member>
        <member name="F:Cassowary_moddiff.ClTableau.ExternalParametricVars">
            <summary>
            Set of external variables which are parametric
            this was added to the Java/C++/C# versions to reduce time in SetExternalVariables().
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.ClVariable">
            <summary>
            Linear Variable representation
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClVariable.#ctor(System.String,System.Double)">
            <summary>
            creates variable with custom name
            </summary>
            <param name="name">nariable name</param>
        </member>
        <member name="M:Cassowary_moddiff.ClVariable.#ctor(System.String)">
            <summary>
            creates variable with custom name
            </summary>
            <param name="name">nariable name</param>
        </member>
        <member name="M:Cassowary_moddiff.ClVariable.#ctor(System.Double)">
            <summary>
            creates variable and sets its value
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Cassowary_moddiff.ClVariable.#ctor(System.Int64,System.String,System.Double)">
            <summary>
            creates variable with autogenerated name and sets its value
            </summary>
            <param name="number">
            variable id
            </param>
            <param name="prefix">
            variable name prefix
            </param>
            <param name="value">value</param>
        </member>
        <member name="P:Cassowary_moddiff.ClVariable.IsDummy">
            <summary>
            a placeholder variable
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClVariable.IsExternal">
            <summary>
            indicates variable was added from outside of solver and should be preserved
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClVariable.IsPivotable">
            <summary>
            variable can be pivoted (TODO: proper description)
            </summary>
        </member>
        <member name="P:Cassowary_moddiff.ClVariable.IsRestricted">
            <summary>
            variable can not be negative
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.ClVariable.ToString">
            <summary>Returns a string that represents the current object.Converts to string.</summary>
        </member>
        <member name="P:Cassowary_moddiff.ClVariable.Value">
            <summary>
              <para>Current value of the variable</para>
            </summary>
        </member>
        <member name="T:Cassowary_moddiff.IEditContext">
            <summary>
            Edit transaction interface
            </summary>
        </member>
        <member name="M:Cassowary_moddiff.IEditContext.EndEdit">
            <summary>
            Marks the end of an edit session.
            </summary>
            <remarks>
            EndEdit should be called after editing has finished for now, it
            just removes all edit variables.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.IEditContext.SuggestValue(Cassowary_moddiff.ClVariable,System.Double)">
            <summary>
            Suggest a new value for an edit variable. 
            </summary>
            <remarks>
            The variable needs to be added as an edit variable and 
            BeginEdit() needs to be called before this is called.
            The tableau will not be solved completely until after Resolve()
            has been called.
            </remarks>
        </member>
        <member name="M:Cassowary_moddiff.IEditContext.Resolve">
            <summary>
            Re-solve the current collection of constraints, given the new
            values for the edit variables that have already been
            suggested (see <see cref="M:Cassowary_moddiff.IEditContext.SuggestValue(Cassowary_moddiff.ClVariable,System.Double)"/> method).
            </summary>
        </member>
    </members>
</doc>
